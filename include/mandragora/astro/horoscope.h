#ifndef _MANDRAGORA_ASTRO_HOROSCOPE_H#define _MANDRAGORA_ASTRO_HOROSCOPE_H#include <mandragora/calendar.h>#include <mandragora/astro/astronomy.h>#include <mandragora/astro/astrology.h>/** HOROSCOPE_STYLE */enum {	HOROSCOPE_NATAL					= 0x0001,	HOROSCOPE_SYNASTRY				= 0x0002,	HOROSCOPE_COMPOSITE				= 0x0004,	HOROSCOPE_GEOCENTRIC				= 0x0008,	HOROSCOPE_HELIOCENTRIC			= 0x0010,	HOROSCOPE_SIDERIAN				= 0x0020,	HOROSCOPE_TROPICAL				= 0x0040,	HOROSCOPE_ASPECT_IN_SIGN		= 0x0080,};typedef struct horoscope {	char *name;							//!< Name	calendar time;						//!< Local Time.	calendar gmt;						//!< GMT Time.	double dst;							//!< Daylight Saving Time, in decimal form (to convert a 1.30 value to 1.50 use hour_to_dec()).	double tz;							//!< Timezone	double lon;							//!< Longitude of observer	double lat;							//!< Latitude of observer	double deltat;						//!< Delta time.	double sdrlt;						//!< Siderial time.	int style;							//!< Flags for the style of the horoscope, from the HOROSCOPE_STYLE enumeration.	int hsystem;						//!< House system used for calculating houses.	/** @name Variables for calculating Ascension and some planetary points e.g. Eastpoint and Vertex.	 * @{ */	double ra;							//!< Right Ascension	double ob;							//!< 	double la;							//!< Latitude	/** @} */	int nplanets;						//!< Number of planets	astro_planet *planets;			//!< Planets.	astro_house houses[12];			//!< Hourses.	int naspects;						//!< Number of aspects.	astro_aspect *aspects;			//!< Aspects.	int nasppat;						//!< Number of aspect patterns.	int fasppat;						//!< Flags for which aspect patterns the horoscope contains. From the ASTRO_PATTERNS enumeration flags are set to 1<<n.	astro_pattern *asppat;			//!< Aspect patterns	int aspshp;							//!< Aspect Shape.	/** @name Quick access members. These members give quick access to the	 * planets in the planets-array, to avoid having to iterate through	 * the array to find a specific planet.	 * @{ */	/** Index of all planets in the planets-array. */	int iplanets[ASTRO_NUM_PLANET_POINTS];	int isun;							//!< Index of Sun in the planets-array.	int imoon;							//!< Index of Moon in the planets-array.	int imer;							//!< Index of Mercury in the planets-array.	int iven;							//!< Index of Venus in the planets-array.	int imar;							//!< Index of Mars in the planets-array.	int ijup;							//!< Index of Jupiter in the planets-array.	int isat;							//!< Index of Saturn in the planets-array.	int iura;							//!< Index of Uranus in the planets-array.	int inep;							//!< Index of Neptune in the planets-array.	int iplu;							//!< Index of Pluto in the planets-array.	int iasc;							//!< Index of Ascendant in the planets-array.	int imc;								//!< Index of Medium Coeli in the planets-array.	int irulpl;							//!< Index of Ruling planet. The planet that rules the sign in which the Ascendant is in.	int irulh;							//!< Index of Ruling house. The house in which the Ruling planet is in.	/** @} */} horoscope;/** Create a horoscope object for casting charts. * @param name A name representing the horoscope. * @param y Year * @param m Month * @param d Day of month * @param h Hour * @param n Minute * @param s Second and fraction of second * @param tz Timezone, relative to GMT in decimal form, where eastern times are positive and western negative i.e. CET is 1.0. * @param dst Daylight Saving Time, in decimal form (to convert a 1.30 value to 1.50 use hour_to_dec()). * @param greg Gregorian time; 1=Gregorian Time, 0=Julian Time (usually 1, only for dates older than middleages 0 is used). * @param lon Longitude of observation. It should be a decimal value, where an eastern degree is negative and a western positive. * @param lat Latitude of observation. It should be a decimal value, where a southern degree is negative and a northern positive. * @see hour_to_dec() * @see horoscope_delete() * @return An allocated horoscope object. Use horoscope_delete() to delete object. */horoscope *horoscope_new(const char *name,int y,int m,int d,int h,int n,double s,double tz,double dst,int greg,double lon,double lat);/** Delete a horoscope object allocated by horoscope_new() * @param h A horoscope object allocated by horoscope_new(). * @see horoscope_new() */void horoscope_delete(horoscope *h);/** Cast a horoscope chart. * @param h Horoscope object. * @param a An astronomy object with calculated planets. * @param st Style of the horoscope, flags used from the HOROSCOPE_STYLE enumeration. * @param hsys House system, a value from the ASTRO_HSYSTEMS enumeration. * @see horoscope_new() */void horoscope_cast(horoscope *h,astronomy *a,int st,int hsys);int horoscope_in_aspect_pattern(horoscope *h,int p1,int p2,int a);void horoscope_elements(horoscope *h,int e[ASTRO_NUM_ELEMENTS]);void horoscope_qualities(horoscope *h,int q[ASTRO_NUM_QUALITIES]);void horoscope_energies(horoscope *h,int e[ASTRO_NUM_ENERGIES]);#endif /* _MANDRAGORA_ASTRO_HOROSCOPE_H */